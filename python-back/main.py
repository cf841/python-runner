import Sudoku
import Conditions
import Solver
import time
start = time.time()
s = Sudoku.Sudoku()

# Some Thermo bug with setup.

def puzzle_1(grid):
    board = grid.grid
    grid.add_condition(Conditions.Thermo([board[0][1], board[0][2]]))
    grid.add_condition(Conditions.Thermo([board[6][1], board[5][2], board[4][1], board[3][1], board[2][1]]))
    
    grid.add_condition(Conditions.Palindrome([board[2][2], board[2][3], board[3][3]]))
    grid.add_condition(Conditions.Palindrome([board[6][2], board[6][3], board[5][3]]))
    grid.add_condition(Conditions.Palindrome([board[4][5], board[4][6], board[5][6]]))
    grid.set_pos(0, 2, 8)
    grid.set_pos(0, 0, 1)
    grid.set_pos(0, 3, 9)
    grid.set_pos(0, 6, 7)
    grid.set_pos(1, 1, 2)
    grid.set_pos(1, 7, 5)
    grid.set_pos(2, 5, 6)
    grid.set_pos(2, 8, 8)
    grid.set_pos(4, 7, 8)
    grid.set_pos(4, 4, 7)
    grid.set_pos(5, 5, 3)
    grid.set_pos(7, 1, 8)
    grid.set_pos(7, 4, 5)
    grid.set_pos(7, 7, 6)

def setup_puzzle_2(grid):
    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)
    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,6,1)
    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,6,5)
    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,7,4)
    grid.set_pos(8,4,1)

def palindrome_puzzle(grid):
    board = grid.grid
    grid.add_condition(Conditions.Palindrome([board[0][3], board[0][4], board[0][5], board[1][6], board[1][7]]))
    grid.add_condition(Conditions.Palindrome([board[6][2], board[5][3], board[5][4]]))
    #grid.add_condition(Conditions.Thermo([board[7][0], board[6][1], board[6][2]]))
    grid.add_condition(Conditions.Thermo([board[2][5], board[3][5], board[4][5], board[5][5]]))
    grid.add_condition(Conditions.Palindrome([board[3][5], board[4][6], board[5][5], board[6][6]]))
    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)

    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,3,5)
    grid.set_pos(3,6,1)

    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(4,8,6)

    grid.set_pos(5,6,5)

    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,8,8)

    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,6,9)
    grid.set_pos(7,7,4)

    grid.set_pos(8,4,1)

def thermo(grid):
    board = grid.grid
    grid.add_condition(Conditions.Thermo([board[5][1], board[6][0]]))
    grid.add_condition(Conditions.Thermo([board[8][4], board[7][5], board[8][6]]))
    grid.add_condition(Conditions.Thermo([board[6][3], board[7][4], board[8][3]]))
    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)

    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,3,5)
    grid.set_pos(3,6,1)

    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(4,8,6)

    grid.set_pos(5,6,5)

    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,8,8)

    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,6,9)
    grid.set_pos(7,7,4)

    grid.set_pos(8,4,1)
# Odds at (0, 3), (4, 2), (6, 6), (7, 5)
def odd_puzzle(grid):


    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.add_condition(Conditions.Odd([grid.grid[0][3]]))
    grid.add_condition(Conditions.Odd([grid.grid[4][2]]))
    grid.add_condition(Conditions.Odd([grid.grid[6][6]]))
    grid.add_condition(Conditions.Odd([grid.grid[7][5]]))
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)

    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,3,5)
    grid.set_pos(3,6,1)

    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(4,8,6)

    grid.set_pos(5,6,5)

    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,8,8)

    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,6,9)
    grid.set_pos(7,7,4)

    grid.set_pos(8,4,1)

def killer_thermo(grid):
    board = grid.grid
    grid.add_condition(Conditions.Killer_Sum([board[4][1], board[4][2], board[4][3]], 8), [board[4][1], board[4][2], board[4][3]])
    grid.add_condition(Conditions.Thermo([board[7][5], board[8][6], board[8][7]]), [board[7][5], board[8][6], board[8][7]])
    grid.add_condition(Conditions.Killer_Sum([board[0][1], board[0][2], board[1][2]], 8), [board[0][1], board[0][2], board[1][2]])
    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)

    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,3,5)
    grid.set_pos(3,6,1)

    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(4,8,6)

    grid.set_pos(5,6,5)

    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,8,8)

    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,6,9)
    grid.set_pos(7,7,4)

    grid.set_pos(8,4,1)

def consec(grid):
    

    grid.set_pos(0, 0, 8)
    grid.set_pos(0, 6, 7)
    grid.set_pos(0,8,1)
    grid.add_condition(Conditions.Consecutive([grid.grid[0][5], grid.grid[1][5]]))
    grid.add_condition(Conditions.Consecutive([grid.grid[8][5], grid.grid[8][6]]))
    grid.set_pos(1,3,4)
    grid.set_pos(1,5,3)

    grid.set_pos(3,0,7)
    grid.set_pos(3,2,8)
    grid.set_pos(3,3,5)
    grid.set_pos(3,6,1)

    grid.set_pos(4,3,2)
    grid.set_pos(4,7,3)
    grid.set_pos(4,8,6)

    grid.set_pos(5,6,5)

    grid.set_pos(6,1,2)
    grid.set_pos(6,4,7)
    grid.set_pos(6,8,8)

    grid.set_pos(7,1,3)
    grid.set_pos(7,2,6)
    grid.set_pos(7,6,9)
    grid.set_pos(7,7,4)

    grid.set_pos(8,4,1)

def setup_puzzle_with_one_missing(grid):
    grid.set_pos(0, 1, 3)
    grid.set_pos(0, 2, 4)
    grid.set_pos(0, 3, 6)
    #grid.set_pos(0, 4, 7)
    #grid.set_pos(0, 5, 8)
    grid.set_pos(0, 6, 9)
    grid.set_pos(0, 7, 1)
    grid.set_pos(0, 8, 2)
    grid.set_pos(1, 0, 6)
    grid.set_pos(1, 1, 7)
    grid.set_pos(1, 2, 2)
    grid.set_pos(1, 3, 1)
    grid.set_pos(1, 4, 9)
    grid.set_pos(1, 5, 5)
    grid.set_pos(1, 6, 3)
    grid.set_pos(1, 7, 4)
    grid.set_pos(1, 8, 8)
    grid.set_pos(2, 0, 1)
    grid.set_pos(2, 1, 9)
    grid.set_pos(2, 2, 8)
    grid.set_pos(2, 3, 3)
    grid.set_pos(2, 4, 4)
    grid.set_pos(2, 5, 2)
    grid.set_pos(2, 6, 5)
    grid.set_pos(2, 7, 6)
    grid.set_pos(2, 8, 7)
    grid.set_pos(3, 0, 8)
    grid.set_pos(3, 1, 5)
    grid.set_pos(3, 2, 9)  # KEy one (makesd invalid if remove)
    grid.set_pos(3, 3, 7)
    grid.set_pos(3, 4, 6)
    grid.set_pos(3, 5, 1)
    grid.set_pos(3, 6, 4)
    grid.set_pos(3, 7, 2)
    grid.set_pos(3, 8, 3)
    grid.set_pos(4, 0, 4)
    grid.set_pos(4, 1, 2)
    grid.set_pos(4, 2, 6)
    grid.set_pos(4, 3, 8)
    grid.set_pos(4, 4, 5)
    grid.set_pos(4, 5, 3)
    grid.set_pos(4, 6, 7)
    grid.set_pos(4, 7, 9)
    grid.set_pos(4, 8, 1)
    grid.set_pos(5, 0, 7)
    grid.set_pos(5, 1, 1)
    grid.set_pos(5, 2, 3)
    grid.set_pos(5, 3, 9)
    grid.set_pos(5, 4, 2)
    grid.set_pos(5, 5, 4)
    grid.set_pos(5, 6, 8)
    grid.set_pos(5, 7, 5)
    grid.set_pos(5, 8, 6)
    grid.set_pos(6, 0, 9)
    grid.set_pos(6, 1, 6)
    grid.set_pos(6, 2, 1)
    grid.set_pos(6, 3, 5)
    grid.set_pos(6, 4, 3)
    grid.set_pos(6, 5, 7)
    grid.set_pos(6, 6, 2)
    grid.set_pos(6, 7, 8)
    grid.set_pos(6, 8, 4)
    grid.set_pos(7, 0, 2)
    grid.set_pos(7, 1, 8)
    grid.set_pos(7, 2, 7)
    grid.set_pos(7, 3, 4)
    grid.set_pos(7, 4, 1)
    grid.set_pos(7, 5, 9)
    grid.set_pos(7, 6, 6)
    grid.set_pos(7, 7, 3)
    grid.set_pos(7, 8, 5)
    grid.set_pos(8, 0, 3)
    grid.set_pos(8, 1, 4)
    grid.set_pos(8, 2, 5)
    grid.set_pos(8, 3, 2)
    grid.set_pos(8, 4, 8)
    grid.set_pos(8, 5, 6)
    grid.set_pos(8, 6, 1)
    grid.set_pos(8, 7, 7)
    grid.set_pos(8, 8, 9)

def adjacent_puzzle(grid):
    grid.set_pos(0, 4, 1)
    grid.set_pos(0, 7, 3)
    grid.set_pos(0, 8, 8)
    grid.set_pos(1, 3, 4)
    grid.set_pos(2, 0, 3)#
    grid.set_pos(2, 5, 7)

def basic_puzzle(grid):
    grid.set_pos(0, 4, 1)
    grid.set_pos(0, 6, 4)
    grid.set_pos(1, 3, 2)
    grid.set_pos(1, 8, 1)
    grid.set_pos(2, 0, 5)
    grid.set_pos(2, 6, 6)
    grid.set_pos(2, 8, 8)
    grid.set_pos(3, 1, 7)
    grid.set_pos(3, 3, 1)
    grid.set_pos(3, 4, 6)
    grid.set_pos(3, 6, 9)
    grid.set_pos(4, 3, 4)
    grid.set_pos(4, 5, 5)
    grid.set_pos(5, 2, 1)
    grid.set_pos(5, 4, 2)
    grid.set_pos(5, 5, 3)
    grid.set_pos(5, 7, 7)
    grid.set_pos(6, 0, 9)
    grid.set_pos(6, 2, 4)
    grid.set_pos(6, 8, 5)
    grid.set_pos(7, 0, 3)
    grid.set_pos(7, 5, 1)
    grid.set_pos(8, 2, 6)
    grid.set_pos(8, 4, 8)

palindrome_puzzle(s)
valid = s.setup()
print(s)
solver = Solver.Solver()
final = solver.solver(s)
print(final)

print(time.time() - start)
